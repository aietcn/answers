// automatically generated by the FlatBuffers compiler, do not modify

package self.data.format.flatbuffers;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class SensorData extends Table {
  public static SensorData getRootAsSensorData(ByteBuffer _bb) { return getRootAsSensorData(_bb, new SensorData()); }
  public static SensorData getRootAsSensorData(ByteBuffer _bb, SensorData obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public SensorData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long timestamp(int j) { int o = __offset(4); return o != 0 ? bb.getLong(__vector(o) + j * 8) : 0; }
  public int timestampLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer timestampAsByteBuffer() { return __vector_as_bytebuffer(4, 8); }
  public double x(int j) { int o = __offset(6); return o != 0 ? bb.getDouble(__vector(o) + j * 8) : 0; }
  public int xLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer xAsByteBuffer() { return __vector_as_bytebuffer(6, 8); }
  public double y(int j) { int o = __offset(8); return o != 0 ? bb.getDouble(__vector(o) + j * 8) : 0; }
  public int yLength() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer yAsByteBuffer() { return __vector_as_bytebuffer(8, 8); }
  public double z(int j) { int o = __offset(10); return o != 0 ? bb.getDouble(__vector(o) + j * 8) : 0; }
  public int zLength() { int o = __offset(10); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer zAsByteBuffer() { return __vector_as_bytebuffer(10, 8); }
  public byte sensor() { int o = __offset(12); return o != 0 ? bb.get(o + bb_pos) : 1; }

  public static int createSensorData(FlatBufferBuilder builder,
      int timestampOffset,
      int xOffset,
      int yOffset,
      int zOffset,
      byte sensor) {
    builder.startObject(5);
    SensorData.addZ(builder, zOffset);
    SensorData.addY(builder, yOffset);
    SensorData.addX(builder, xOffset);
    SensorData.addTimestamp(builder, timestampOffset);
    SensorData.addSensor(builder, sensor);
    return SensorData.endSensorData(builder);
  }

  public static void startSensorData(FlatBufferBuilder builder) { builder.startObject(5); }
  public static void addTimestamp(FlatBufferBuilder builder, int timestampOffset) { builder.addOffset(0, timestampOffset, 0); }
  public static int createTimestampVector(FlatBufferBuilder builder, long[] data) { builder.startVector(8, data.length, 8); for (int i = data.length - 1; i >= 0; i--) builder.addLong(data[i]); return builder.endVector(); }
  public static void startTimestampVector(FlatBufferBuilder builder, int numElems) { builder.startVector(8, numElems, 8); }
  public static void addX(FlatBufferBuilder builder, int xOffset) { builder.addOffset(1, xOffset, 0); }
  public static int createXVector(FlatBufferBuilder builder, double[] data) { builder.startVector(8, data.length, 8); for (int i = data.length - 1; i >= 0; i--) builder.addDouble(data[i]); return builder.endVector(); }
  public static void startXVector(FlatBufferBuilder builder, int numElems) { builder.startVector(8, numElems, 8); }
  public static void addY(FlatBufferBuilder builder, int yOffset) { builder.addOffset(2, yOffset, 0); }
  public static int createYVector(FlatBufferBuilder builder, double[] data) { builder.startVector(8, data.length, 8); for (int i = data.length - 1; i >= 0; i--) builder.addDouble(data[i]); return builder.endVector(); }
  public static void startYVector(FlatBufferBuilder builder, int numElems) { builder.startVector(8, numElems, 8); }
  public static void addZ(FlatBufferBuilder builder, int zOffset) { builder.addOffset(3, zOffset, 0); }
  public static int createZVector(FlatBufferBuilder builder, double[] data) { builder.startVector(8, data.length, 8); for (int i = data.length - 1; i >= 0; i--) builder.addDouble(data[i]); return builder.endVector(); }
  public static void startZVector(FlatBufferBuilder builder, int numElems) { builder.startVector(8, numElems, 8); }
  public static void addSensor(FlatBufferBuilder builder, byte sensor) { builder.addByte(4, sensor, 1); }
  public static int endSensorData(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

